# TokIntel ‚Äì Final Ops Bootstrap (Cursor One‚ÄëShot)
# - Aggiunge validator per collezioni TikTok
# - Potenzia Makefile (GUI/Batch/Run/Validate)
# - Installa pre-push hook che valida input/*.json
# - Esegue giro rapido e pusha
# Idempotente.

set -e

echo "üîé Prerequisiti"
which git  >/dev/null || (echo "‚ùå git mancante" && exit 1)
which make >/dev/null || (echo "‚ùå make mancante" && exit 1)
python3 --version || (echo "‚ùå python3 mancante" && exit 1)

echo "üìÇ Struttura cartelle"
mkdir -p scripts input exports .git/hooks

# ------------------------------
# 1) Validator
# ------------------------------
VAL=scripts/validate_collections.py
if [ ! -f "$VAL" ]; then
  echo "‚ûï Creo $VAL"
  cat > "$VAL" <<'PY'
#!/usr/bin/env python3
# Minimal validator per raccolte TikTok
import json, sys, pathlib

REQUIRED_ITEM_KEYS = {"id", "url"}            # estendibile (es. title, tags)
ALLOWED_ROOT_KEYS  = {"collections", "items"} # supporta due formati

def error(msg):
    print(f"‚ùå {msg}", file=sys.stderr)
    sys.exit(2)

def ok(msg):
    print(f"‚úÖ {msg}")
    sys.exit(0)

def validate_items(items):
    if not isinstance(items, list) or not items:
        error("items deve essere una lista non vuota")
    bad = []
    for i, it in enumerate(items, 1):
        if not isinstance(it, dict):
            bad.append((i, "voce non √® un oggetto"))
            continue
        missing = REQUIRED_ITEM_KEYS - it.keys()
        if missing:
            bad.append((i, f"mancano campi {sorted(missing)}"))
        if "url" in it and not str(it["url"]).startswith(("http://","https://")):
            bad.append((i, "url non valido"))
    if bad:
        for idx, why in bad[:10]:
            print(f" - item #{idx}: {why}", file=sys.stderr)
        error(f"{len(bad)} item non validi")
    return True

def main():
    if len(sys.argv) < 2:
        error("uso: validate_collections.py <input.json>")
    p = pathlib.Path(sys.argv[1])
    if not p.exists():
        error(f"file non trovato: {p}")
    try:
        data = json.loads(p.read_text(encoding="utf-8"))
    except Exception as e:
        error(f"JSON non valido: {e}")

    # supporta: { "items": [...] }  oppure  { "collections": [ { "items": [...] }, ... ] }
    if "items" in data:
        validate_items(data["items"])
    elif "collections" in data:
        if not isinstance(data["collections"], list) or not data["collections"]:
            error("collections deve essere una lista non vuota")
        total = 0
        for c in data["collections"]:
            if not isinstance(c, dict) or "items" not in c:
                error("ogni collection deve avere 'items'")
            validate_items(c["items"])
            total += len(c["items"])
        if total == 0:
            error("nessun item nelle collections")
    else:
        error(f"root keys non riconosciute. Usa una tra {sorted(ALLOWED_ROOT_KEYS)}")

    ok(f"Input valido: {p}")

if __name__ == "__main__":
    main()
PY
  chmod +x "$VAL"
else
  echo "‚ÑπÔ∏è Validator gi√† presente"
fi

# ------------------------------
# 2) Makefile ‚Äì targets operativi
# ------------------------------
echo "üõ†Ô∏è  Aggiorno Makefile con target tokintel-* (se mancanti)"
touch Makefile

# help
grep -q "^help:" Makefile || cat >> Makefile <<'MK'
.PHONY: help
help:
	@echo "TokIntel ‚Äì Targets principali"
	@echo "  make tokintel-run        # Wizard: scegli GUI o Batch (con default)"
	@echo "  make tokintel-gui        # Avvia GUI e apre il browser"
	@echo "  make tokintel-batch IN=path/to.json OUT=name   # Batch non interattivo"
	@echo "  make tokintel-validate IN=path/to.json         # Valida input JSON"
	@echo "  Vars: TOK_INPUT_DEFAULT='$(TOK_INPUT_DEFAULT)' TOK_OUTPUT_DEFAULT='$(TOK_OUTPUT_DEFAULT)' TOK_GUI_URL='$(TOK_GUI_URL)'"
MK

# vars + run/gui/batch/validate
grep -q "^TOK_GUI_URL" Makefile || cat >> Makefile <<'MK'
# =========================
# TokIntel ‚Äî Avvio rapido
# =========================
.PHONY: tokintel-run tokintel-gui tokintel-batch tokintel-validate

# Default configurabili
TOK_GUI_URL ?= http://localhost:8501
TOK_INPUT_DEFAULT ?= input/my_collections.json
TOK_OUTPUT_DEFAULT ?= run_$(shell date -u +%Y%m%d_%H%M%S)

tokintel-run:
	@echo "üöÄ Avvio TokIntel..."
	@read -p "Vuoi avviare la GUI (g) o la modalit√† batch (b)? [g/b] " mode; \
	if [ "$$mode" = "g" ] || [ -z "$$mode" ]; then \
		$(MAKE) tokintel-gui; \
	elif [ "$$mode" = "b" ]; then \
		infile="$(TOK_INPUT_DEFAULT)"; \
		outfile="$(TOK_OUTPUT_DEFAULT)"; \
		printf "üì• Percorso file input [%s]: " "$$infile"; read ans; [ -n "$$ans" ] && infile="$$ans"; \
		printf "üì§ Nome file output (senza estensione) [%s]: " "$$outfile"; read ans; [ -n "$$ans" ] && outfile="$$ans"; \
		$(MAKE) tokintel-batch IN="$$infile" OUT="$$outfile"; \
	else \
		echo "‚ùå Scelta non valida"; exit 2; \
	fi

tokintel-gui:
	@echo "üåê Avvio GUI TokIntel‚Ä¶"
	@( \
	  python3 - <<'PY' & \
	  import time, webbrowser; time.sleep(2); webbrowser.open("$(TOK_GUI_URL)"); \
	  PY \
	) >/dev/null 2>&1 || true
	@python3 launch_tokintel_gui.py

tokintel-validate:
	@if [ -z "$(IN)" ]; then echo "‚ùå Specifica IN=path/to/input.json"; exit 2; fi
	@python3 scripts/validate_collections.py "$(IN)"

tokintel-batch:
	@if [ -z "$(IN)" ]; then echo "‚ùå Specifica IN=path/to/input.json (o usa tokintel-run)"; exit 2; fi
	@out="$(OUT)"; [ -n "$$out" ] || out="$(TOK_OUTPUT_DEFAULT)"; \
	$(MAKE) -s tokintel-validate IN="$(IN)"; \
	mkdir -p exports; \
	echo "üì¶ Batch TokIntel ‚Üí IN='$(IN)'  OUT='exports/$$out.json'"; \
	python3 analyzer/tiktok_collections.py --source "$(IN)" --export "exports/$$out.json"; \
	echo "‚úÖ Analisi completata ‚Üí exports/$$out.json"
MK

# ------------------------------
# 3) Hook pre-push: valida input/*.json modificati
# ------------------------------
echo "ü™ù Pre-push hook (valida input/*.json se cambiati)"
cat > .git/hooks/pre-push <<'HOOK'
#!/usr/bin/env sh
set -e
echo "üîê pre-push: validazione input JSON (se presenti modifiche)"
# determina remote e branch
read local_ref local_sha remote_ref remote_sha
# elenco file cambiati rispetto a HEAD origin (best effort)
CHANGED="$(git diff --name-only --cached | tr -d '\r' || true)"
[ -z "$CHANGED" ] && CHANGED="$(git diff --name-only origin/HEAD...HEAD 2>/dev/null || true)"
FOUND=0
for f in $CHANGED; do
  case "$f" in
    input/*.json)
      echo "üîé Valido $f"
      FOUND=1
      python3 scripts/validate_collections.py "$f"
      ;;
  esac
done
[ "$FOUND" -eq 0 ] && echo "‚ÑπÔ∏è  Nessun input/*.json da validare"
HOOK
chmod +x .git/hooks/pre-push

# ------------------------------
# 4) Giro rapido locale (best effort)
# ------------------------------
echo "üöÄ Giro rapido locale"
(make docs-check || true)
# Mostra help dei target TokIntel
(make help | sed -n '1,20p' || true)

# ------------------------------
# 5) Commit & push
# ------------------------------
echo "üíæ Commit & push"
git add -A
git commit -m "ops: add TikTok collections validator + tokintel run/gui/batch targets + pre-push validation hook" || echo "‚ÑπÔ∏è Nulla da committare"
git push || echo "‚ÑπÔ∏è Push non riuscito (controlla remote/permessi)"

echo "‚úÖ Completato. Usa:"
echo "   make tokintel-run            # wizard GUI/Batch"
echo "   make tokintel-gui            # GUI diretta (apre browser)"
echo "   make tokintel-batch IN=... OUT=..."
echo "   make tokintel-validate IN=..."

name: Prod Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  prod-check:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
      - name: Run prod-check
        env:
          TOKINTEL_VERSION: ${{ github.ref_name }}-${{ github.sha }}
          FF_DISABLE_CACHE: "0"
          CACHE_TTL_SECONDS: "0"
        run: |
          make help
          make prod-check
      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: prod-reports
          path: |
            reports/*.md
            reports/*.json
            exports/*.csv
            exports/*.json

  staging-check:
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
      - name: Prepare staging DB (medium)
        run: |
          python scripts/create_sample_db.py --staging
      - name: Run prod-check on staging DB
        env:
          DB_PATH: data/staging_db.sqlite
          TOKINTEL_VERSION: pr-${{ github.event.pull_request.number || 'manual' }}-${{ github.sha }}
          FF_DISABLE_CACHE: "0"
          CACHE_TTL_SECONDS: "0"
        run: |
          make prod-check
      - name: Upload staging reports
        uses: actions/upload-artifact@v4
        with:
          name: staging-reports
          path: |
            reports/*.md
            reports/*.json
            exports/*.csv
            exports/*.json

  performance-check:
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        thresholds:
          - { sql: 1200, export: 1200 }   # pi√π severo (early warning)
          - { sql: 1500, export: 1500 }   # standard (blocco)
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pandas jq
      - name: Prepare large staging DB (performance)
        run: |
          python scripts/create_sample_db.py --staging --large
      - name: Run performance bench (with thresholds)
        env:
          DB_PATH: data/staging_db.sqlite
          PERFORMANCE_TEST: "1"
          FF_DISABLE_CACHE: "0"
          CACHE_TTL_SECONDS: "0"
          MAX_SQL_READ_MS: "${{ matrix.thresholds.sql }}"
          MAX_EXPORT_MS:   "${{ matrix.thresholds.export }}"
        run: |
          python scripts/perf_bench.py --db "$DB_PATH"
      - name: Prepare PR summary
        if: always() && github.event_name == 'pull_request'
        id: perf_summary
        run: |
          JSON=$(ls -t reports/perf_*.json | head -1)
          echo "json_path=$JSON" >> $GITHUB_OUTPUT
          SQL=$(jq '.perf.sql_read_500' "$JSON")
          EXPCSV=$(jq '.perf.export_csv' "$JSON")
          EXPJSON=$(jq '.perf.export_json' "$JSON")
          ROWS=$(jq '.perf.videos_count' "$JSON")
          THSQL="${{ matrix.thresholds.sql }}"
          THEXP="${{ matrix.thresholds.export }}"
          cat > perf_comment.md <<'MD'
          ### üî¨ Performance Check (matrix)
          **Rows:** {{ROWS}}  
          **Timings (ms):**
          - sql_read_500: **{{SQL}}** (threshold {{THSQL}})
          - export_csv: **{{EXPCSV}}** (threshold {{THEXP}})
          - export_json: **{{EXPJSON}}** (threshold {{THEXP}})

          > Matrix: `sql={{THSQL}}`, `export={{THEXP}}`  
          Artifacts: vedi tab "Artifacts" ‚Üí `performance-reports`
          MD
          sed -i "s/{{ROWS}}/$ROWS/g; s/{{SQL}}/$SQL/g; s/{{EXPCSV}}/$EXPCSV/g; s/{{EXPJSON}}/$EXPJSON/g; s/{{THSQL}}/$THSQL/g; s/{{THEXP}}/$THEXP/g" perf_comment.md
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat perf_comment.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Comment on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          BODY: ${{ steps.perf_summary.outputs.body }}
        with:
          script: |
            const body = process.env.BODY || 'Performance summary not available.'
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            })
      - name: Add label on perf regression
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['perf-regression']
            })
      - name: Notify Slack on perf failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA: ${{ github.sha }}
        run: |
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "[info] No SLACK_WEBHOOK_URL secret configured, skipping Slack notification."
            exit 0
          fi
          payload=$(jq -n --arg pr "$PR_NUMBER" --arg sha "$SHA" \
            '{text: ("‚ùå Performance check failed on PR #"+$pr+" ("+$sha+"). See Actions ‚Üí performance-reports.")}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"
      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            reports/perf_*.json
            reports/perf_*.md

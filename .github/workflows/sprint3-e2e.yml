name: Sprint 3 E2E Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  lint-makefile:
    name: Lint Makefile (TAB recipes)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate Makefile uses TAB for recipe lines
        run: |
          python - <<'PY'
          import sys, re
          txt = open("Makefile","rb").read().decode("utf-8","replace").splitlines()
          in_recipe = False
          bad = False
          for i, l in enumerate(txt, 1):
              # Inizio target (linea con colon, esclusi commenti/spazi)
              if re.match(r"^[^\s#][^:]*:", l):
                  in_recipe = True
                  continue
              # Linea vuota o commento dentro recipe: ok
              if in_recipe and (l.strip()=="" or l.strip().startswith("#")):
                  continue
              # Ricetta valida: deve iniziare con TAB
              if in_recipe and l.startswith("\t"):
                  continue
              # Uscita dalla ricetta: nuova directive/target
              if in_recipe and re.match(r"^[^\s]", l):
                  in_recipe = False
                  # rianalizza questa riga nel prossimo giro
                  if re.match(r"^[^\s#][^:]*:", l):
                      in_recipe = True
                  continue
              # Riga non vuota, non commento, dentro ricetta ma senza TAB â‡’ errore
              if in_recipe and l and not l.startswith("\t") and not l.lstrip().startswith("#"):
                  print(f"Makefile:{i}: expected leading TAB in recipe line -> {l[:60]!r}")
                  bad = True
          sys.exit(1 if bad else 0)
          PY

  sprint3-e2e:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
    
    - name: Install deps
      run: |
        python -m pip install -U pip
        pip install -r requirements.txt
        pip install ruff
        pip install pytest-playwright playwright
        make playwright-install
    
    - name: Run E2E
      run: make test-e2e-only
      env:
        TI_PORT: 8510
        TI_AUTO_EXPORT: 1
    
    - name: Run Playwright E2E (E2E mode)
      env:
        TI_E2E_MODE: "1"
        TI_AUTO_EXPORT: "1"
      run: make ci-e2e-playwright
    
    - name: Export health report
      run: python scripts/export_health.py
    
    - name: Upload exports
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: sprint3-exports-${{ matrix.python-version }}
        path: |
          exports/*.csv
          exports/*.json
          exports/screenshots/*.png
          exports/screenshots/*.html
        if-no-files-found: ignore
    
    - name: Run Sprint 3 integration tests
      run: |
        make test-sprint3
    
    - name: Run linting
      run: |
        make lint-sprint3
